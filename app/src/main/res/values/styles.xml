<resources>

    <!--闪屏页的主题-->
    <style name="SplashTheme" parent="Theme.AppCompat.Light.NoActionBar">
        <!--顶部 StatusBar 的背景-->
        <item name="android:statusBarColor">@color/white</item>
        <!--底部 NavigationBar 的背景-->
        <item name="android:navigationBarColor">@color/white</item>
        <!--window 窗口背景-->
        <item name="android:windowBackground">@drawable/layerlist_splash_background</item>
    </style>


    <!--
        默认主题，继承 Theme.AppCompat.Light.NoActionBar 主题
        引用示例参见 AndroidManifest.xml（作用于整个 application）
    -->
    <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar" />
    <!--
        继承上面的 AppTheme 主题，即继承 Theme.AppCompat.Light.NoActionBar 主题，并重写其中的一些样式（关于修改主题中指定控件的默认样式请参见 ui/ThemeDemo3）
        引用示例参见 ui/ThemeDemo1
    -->
    <style name="ThemeDemo1Theme" parent="AppTheme">
        <!--AppBar 的背景-->
        <item name="colorPrimary">@color/red</item>
        <!--控件被选中时的颜色-->
        <item name="colorAccent">@color/purple</item>
        <!--页面背景色-->
        <item name="android:windowBackground">@color/orange</item>
        <!--顶部 StatusBar 的背景-->
        <item name="android:statusBarColor">@color/blue</item>
        <!--底部 NavigationBar 的背景-->
        <item name="android:navigationBarColor">@color/green</item>
    </style>


    <!--
        自定义主题 1（属性的名字和类型是在 res/values/attrs.xml 中定义的）
        引用示例参见 ui/ThemeDemo2
    -->
    <style name="ThemeDemo2Theme1" parent="AppTheme" >
        <item name="myTitleColor">@color/red</item>
        <item name="myTitleBackgroundColor">@color/green</item>
    </style>
    <!--
        自定义主题 2（属性的名字和类型是在 res/values/attrs.xml 中定义的）
        引用示例参见 ui/ThemeDemo2
    -->
    <style name="ThemeDemo2Theme2" parent="AppTheme" >
        <item name="myTitleColor">@color/blue</item>
        <item name="myTitleBackgroundColor">@color/orange</item>
    </style>


    <!--
        通过主题修改控件的默认样式
        通过“ctrl + 鼠标左键”一步一步地找出你需要修改的控件的默认样式，然后复制过来重写就好
     -->
    <style name="ThemeDemo3Theme" parent="AppTheme">
        <item name="buttonStyle">@style/ThemeDemo3ButtonStyle</item>
        <item name="android:textViewStyle">@style/ThemeDemo3TextViewStyle</item>
    </style>
    <style name="ThemeDemo3ButtonStyle" parent="android:Widget">
        <item name="android:textColor">@color/white</item>
        <item name="android:background">@color/orange</item>
    </style>
    <style name="ThemeDemo3TextViewStyle" parent="android:Widget.TextView">
        <item name="android:textColor">@color/orange</item>
        <item name="android:textAppearance">?android:attr/textAppearanceLarge</item>
    </style>


    <!--
        继承 androidx 包的 Widget.AppCompat.Button 样式，并重写其中的一些样式
        引用示例参见 ui/StyleDemo1
    -->
    <style name="StyleDemo1ButtonStyle" parent="Widget.AppCompat.Button">
        <item name="android:textColor">@color/orange</item>
        <item name="android:background">@color/green</item>
    </style>


    <!--
        引用示例参见 view/text/TextViewDemo5
    -->
    <style name="TextAppearanceSpanStyle" parent="@android:style/Widget.TextView">
        <item name="android:textColor">#FF0000</item>
        <item name="android:textStyle">italic</item>
        <item name="android:fontFamily">serif</item>
        <item name="android:textSize">32dp</item>
    </style>


    <!--
        引用示例参见 view/selection/SwitchDemo2
    -->
    <style name="MySwitchTextAppearance" parent="@android:style/TextAppearance.Holo.Small">
        <item name="android:textColor">@color/orange</item>
    </style>


    <!--
        引用示例参见 view/selection/SpinnerDemo2
    -->
    <style name="MySpinnerStyle" parent="Base.Widget.AppCompat.Spinner">
        <!--
            自定义 Spinner 右侧的箭头，以及 Spinner 本身的背景和边框
        -->
        <item name="android:background">@drawable/selector_spinner_background</item>
    </style>
    <!--
        用于在某主题下指定 Spinner 弹出的下拉框的分隔线，需要在相应的主题中引用此样式
    -->
    <style name="MyDropDownListViewStyle" parent="android:style/Widget.ListView.DropDown">
        <item name="android:divider">#ff0000</item>
        <item name="android:dividerHeight">1dp</item>
    </style>
    <style name="MyTheme_MyDropDownListViewStyle" parent="AppTheme" >
        <!--
            用于指定 Spinner 弹出的下拉框的分隔线
        -->
        <item name="android:dropDownListViewStyle">@style/MyDropDownListViewStyle</item>
    </style>


    <!--
        引用示例参见 view/progress/SeekBarDemo2（通过 minHeight, maxHeight 来指定 SeekBar 的高度）
    -->
    <style name="MySeekBarStyle" >
        <item name="android:minHeight">10dp</item>
        <item name="android:maxHeight">10dp</item>
        <item name="android:progressDrawable">@drawable/layerlist_seekbar_progress</item>
        <item name="android:thumb">@drawable/selector_seekbar_thumb</item>
    </style>


    <!--
        引用示例参见 view/progress/RatingBarDemo2（通过 minHeight, maxHeight 来指定 RatingBar 的高度）
    -->
    <style name="MyRatingBarStyle" parent="@android:style/Widget.RatingBar">
        <item name="android:minHeight">40dp</item>
        <item name="android:maxHeight">40dp</item>
        <item name="android:progressDrawable">@drawable/layerlist_ratingbar_progress</item>
    </style>


    <!--
        用于全局指定 activity 之间的跳转动画，需要在相应的主题中引用此样式
        假设从 A 跳转到 B，然后关闭 B，那么说明如下：
            activityOpenEnterAnimation - A 跳转到 B 时，B 的出现动画
            activityOpenExitAnimation - A 跳转到 B 时，A 的消失动画
            activityCloseEnterAnimation - B 关闭时，A 的出现动画
            activityCloseExitAnimation - B 关闭时，B 的消失动画

        引用示例参见 activity/ActivityDemo4_2, activity/ActivityDemo4_3
    -->
    <style name="MyActivityAnimation" parent="@android:style/Animation.Activity">
        <item name="android:activityOpenEnterAnimation">@anim/activity_push_left_in</item>
        <item name="android:activityOpenExitAnimation">@anim/activity_push_left_out</item>
        <item name="android:activityCloseEnterAnimation">@anim/activity_zoom_enter</item>
        <item name="android:activityCloseExitAnimation">@anim/activity_zoom_exit</item>
    </style>
    <style name="MyTheme_MyActivityAnimation" parent="AppTheme" >
        <!--
            用于全局指定 activity 之间的跳转动画
        -->
        <item name="android:windowAnimationStyle">@style/MyActivityAnimation</item>
    </style>


    <!--
        在 AndroidManifest.xml 中的名为“.activity.ActivityDemo6_2”的 activity 节点会引用此主题，用于演示如何显示对话框样式的 activity
    -->
    <style name="MyActivityDialog" parent="@style/Theme.AppCompat.Dialog">
        <!--
            用于去掉对话框样式的 activity 的标题栏
        -->
        <item name="windowNoTitle">true</item>
    </style>


    <!--
        用于设置 AlertDialog 的显示和隐藏动画
        引用示例参见 view/flyout/AlertDialogDemo3
    -->
    <style name="MyAlertDialogAnimationStyle" parent="android:Animation">
        <!--进入时的动画-->
        <item name="android:windowEnterAnimation">@anim/alertdialog_enter</item>
        <!--退出时的动画-->
        <item name="android:windowExitAnimation">@anim/alertdialog_exit</item>
    </style>


    <!--
        用于设置 PopupWindow 的显示和隐藏动画
        引用示例参见 view/flyout/PopupWindowDemo1
    -->
    <style name="MyPopupWindowStyle" parent="android:Animation">
        <!--进入时的动画-->
        <item name="android:windowEnterAnimation">@anim/popupwindow_enter</item>
        <!--退出时的动画-->
        <item name="android:windowExitAnimation">@anim/popupwindow_exit</item>
    </style>


    <!--
        用于在某主题下指定 PopupMenu 的样式
        引用示例参见 view/flyout/PopupMenuDemo2
    -->
    <style name="MyTheme_MyPopupMenuStyle" parent="AppTheme">
        <!--PopupMenu 的背景颜色-->
        <item name="android:itemBackground">@color/orange</item>
        <item name="android:dropDownListViewStyle">@style/MyPopupMenuDivider</item>
        <item name="android:textAppearanceSmallPopupMenu">@style/MyPopupMenuText</item>
        <item name="android:textAppearanceLargePopupMenu">@style/MyPopupMenuText</item>
    </style>
    <!--PopupMenu 的显示的字体-->
    <style name="MyPopupMenuText">
        <item name="android:textColor">@color/white</item>
        <item name="android:textSize">18dp</item>
        <item name="android:gravity">center</item>
    </style>
    <!--PopupMenu 的分割线-->
    <style name="MyPopupMenuDivider">
        <item name="android:divider">@color/blue</item>
        <item name="android:dividerHeight">2dp</item>
    </style>


    <!--
        用于在某主题下指定 ContextMenu 的样式
        引用示例参见 view/flyout/ContextMenuDemo2
    -->
    <style name="MyTheme_MyContextMenuStyle" parent="AppTheme">
        <!--ContextMenu 的背景颜色-->
        <item name="android:itemBackground">@color/orange</item>
        <item name="android:listViewStyle">@style/listView</item>
        <item name="android:itemTextAppearance">@style/MyContextMenuText</item>
    </style>
    <style name="listView" parent="@android:style/Widget.ListView.White">
        <!--ContextMenu 的背景颜色-->
        <item name="android:background">@color/orange</item>
    </style>
    <style name="MyContextMenuText" parent="@android:style/TextAppearance.Widget.IconMenu.Item">
        <!--ContextMenu 的文字颜色-->
        <item name="android:textColor">@color/white</item>
    </style>


    <!--
        用于通过 new AlertDialog.Builder() 的第 2 个参数指定 AlertDialog 的样式
        引用示例参见 view/flyout/AlertDialogDemo4
    -->
    <style name="MyTheme_MyAlertDialogStyle" parent="Theme.AppCompat.Light.Dialog.Alert">
        <!--AlertDialog 的背景颜色-->
        <item name="android:background">@color/red</item>
        <!--AlertDialog 的标题颜色和按钮颜色-->
        <item name="android:textColor">@color/green</item>
        <!--AlertDialog 的内容颜色-->
        <item name="android:textColorPrimary">@color/blue</item>
    </style>


    <!--
        用于在某主题下指定 Toolbar 的样式
        引用示例参见 view/navigation/ToolBarDemo2
    -->
    <style name="MyTheme_MyToolbarStyle" parent="AppTheme">
        <item name="toolbarStyle">@style/MyToolbarStyle</item>
        <item name="actionOverflowMenuStyle">@style/MyActionOverflowMenuStyle</item>
        <!--OptionMenu 的背景颜色-->
        <item name="android:itemBackground">@color/orange</item>
        <item name="android:dropDownListViewStyle">@style/MyOptionMenuDivider</item>
        <item name="android:textAppearanceSmallPopupMenu">@style/MyOptionMenuText</item>
        <item name="android:textAppearanceLargePopupMenu">@style/MyOptionMenuText</item>
    </style>
    <!--
        自定义 Toolbar 的样式，用于清除自定义 view 与 Toolbar 两侧的间距
    -->
    <style name="MyToolbarStyle" parent="Widget.AppCompat.Toolbar">
        <!--自定义 view 与 Toolbar 左侧的间距-->
        <item name="contentInsetStart">0dp</item>
        <!--自定义 view 与 Toolbar 右侧的间距-->
        <item name="contentInsetEnd">0dp</item>
        <!--自定义 view 与 Toolbar 左侧导航按钮的间距-->
        <item name="contentInsetStartWithNavigation">0dp</item>
        <!--整个 Toolbar 的 paddingLeft-->
        <item name="android:paddingLeft">0dp</item>
        <!--整个 Toolbar 的 paddingRight-->
        <item name="android:paddingRight">0dp</item>
    </style>
    <!--Toolbar 右侧按钮弹出的 OptionMenu 的位置-->
    <style name="MyActionOverflowMenuStyle" parent="Widget.AppCompat.PopupMenu.Overflow">
        <!--
            true - 弹出的 OptionMenu 会遮盖 Toolbar 右侧按钮
            false - 弹出的 OptionMenu 在 Toolbar 右侧按钮的下方显示
         -->
        <item name="android:overlapAnchor">false</item>
        <!--弹出的 OptionMenu 的右侧与 Toolbar 右侧的水平边距-->
        <item name="android:dropDownHorizontalOffset">-4dp</item>
    </style>
    <!--OptionMenu 的显示的字体-->
    <style name="MyOptionMenuText">
        <item name="android:textColor">@color/white</item>
        <item name="android:textSize">18dp</item>
        <item name="android:gravity">center</item>
    </style>
    <!--OptionMenu 的分割线-->
    <style name="MyOptionMenuDivider">
        <item name="android:divider">@color/blue</item>
        <item name="android:dividerHeight">2dp</item>
    </style>

</resources>
